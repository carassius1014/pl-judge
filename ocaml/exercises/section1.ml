open Lib.Todo ;;

(***
    ***
    このセクションは日付に関する練習問題である。

    ここでは、x年y月z日を(x,y,z) : int * int * intで表す。
    見やすくするため、type synonymを使ってdateという型名と置く。
    つまりdateとint * int * intは全く同じ型である。

    問題の説明で明示されない限り、不正な日付の入力は考慮しなくて大丈夫。

    <dayOfYear>：
    一年のn日目のこと。例えば33は2月2日である。
    こちらも特に断りがなければうるう年を無視して大丈夫（1から365で大丈夫）。

    ***

 *)

type date = int * int * int
;;

(** 
    
    問題１　：　日付を比べる
    難易度　：　＊

    ２つの日付を比べ、最初の日付が先の場合だけtrueを返す
    （つまり同じ日付の場合はfalse）。
    
 *)

let is_older (_ : date) (_ : date) : bool =
  todo "is_older"
;;

(** 
    
    問題２　：　ある月に含まれるの日付を数える
    難易度　：　＊

    日付のリストとある月（int）を引数としてとり、
    リスト中の、その月に含まれるの日付の数を返す。
    
 *)

let number_in_month (_ : date list) (_ : int) : int =
  todo "number_in_month"
;;

(** 
    
    問題３　：　一部の月の範囲内の日付を数える
    難易度　：  ＊＊
    
    日付のリストと月のリストを引数としてとり、
    与えられた月の範囲内の日付の数を返す。
    ただし、入力の月のリストは重複がないことが保証されている。

    ヒント　：　上の問題の回答を使うこと
    
 *)

let number_in_months (_ : date list) (_ : int list) : int =
  todo "number_in_months"
;;

(** 
    
    問題　　：
    難易度　：
    
*)

(** 
    
    問題　　：
    難易度　：
    
*)

(** 
    
    問題　　：
    難易度　：
    
*)

(** 
    
    問題　　：
    難易度　：
    
*)

(** 
    
    問題　　：
    難易度　：
    
*)

(** 
    
    問題　　：
    難易度　：
    
*)

(** 
    
    問題　　：
    難易度　：
    
*)

(** 
    
    問題　　：
    難易度　：
    
*)

(** 
    
    問題　　：
    難易度　：
    
*)

(** 
    
    問題　　：
    難易度　：
    
*)
